---
title: "Maipulando os Dados"
subtitle: "Uma Breve Introdução ao R"
author:
- Alexandre Nicolella
date: '2024'
format: html
---

## O R-project e as Boas Práticas

### O software R

O R é uma linguagem e ambiente de desenvolvimento de Estatística e gráficos. É uma ferramenta poderosa, fornecendo ao seu usuário maior integração e qualidade gráfica e de análise. Alguns motivos para utilizar o R:

-   **É Gratuito**: é um projeto open-source. Pode ser utilizado em qualquer sistema operacional e tem aberto seus códigos e pactos para poder ser inspecionado.

-   **R é uma Linguagem**:Requer que seja escrito um script ao invés de clicar. A primeira vista uma característica negativa, entretanto, permite maior exploração, organização, memória da atividade, maior integração entre processos etc.

-   **Gráficos e Visualizações**: É sem sombra de dúvida o pacote estatístico com melhor e mais poderosa ferramenta de elaboração de gráficos e visualização.

-   **Pacotes Estatísticos**:Já possui muitas rotinas de análises já programadas nos diversos pacotes desenvolvidos, sendo muito bem documentados. Já possui muitas rotinas para regressão, regressão com séries temporais, regressão em painel, finanças, modelos de causalidade etc.

-   **Fronteira do Conhecimento**: Os principais desenvolvimentos teóricos em Econometria tem sua aplicação demonstrada e desenvolvida utilizando o R. Isso é valido para todas as subáreas do conhecimento em econometria, séries temporais, painel, finanças, etc.

-   **Recursos de Ajuda**: Há uma comunidade muito grande disponível para solucionar dúvidas e uma vasta documentação disponível para consulta na rede.

-   **Conexão com Outros Pacotes**: O R integra com outros pacotes que automatizam o nosso trabalho cotidiano. Pode se conectar com o Python, Java, SQL, Latex etc.

### Utilizando Interface Gráfica - O Rstudio

Pode-se realizar seu script diretamente no console do R. Ele irá realizar um comando por vez. O R é uma interface leve e com poucos recursos gráficos.

Uma alternativa ao uso do R diretamente é o Rstudio, o qual é um editor de código ou um ambiente de desenvolvimento integrado. Ele possui quatro janelas, sendo a primeira a janela de script (superior esquerda) onde escrevemos os comandos em R.

A segunda janela é o console (inferior esquerda) similar ao que temos no R e onde os resultados são apresentados. Pode-se digitar comando diretamente no console do RStudio.

A terceira é a janela de ambiente e história (superior direita) ela armazena seus dados, valores e funções e a aba história possui a memoria dos comandos realizados.

Por fim a quarta janela (inferior direita) apresenta os pacotes, os gráficos, os arquivos gerados e ajuda. Essa janela facilita a instalação de pacotes, carregamento de bibliotecas, visualização de gráficos e o caminho dos arquivos.

### Ajuda

Para abrir a ajuda geral o seguinte abaixo pode ser utilizado e abrirá uma janela no seu navegador.

```{r,eval = FALSE}
help.start()
```

Suponha que queiramos saber de uma função específica, assim pode-se utilizar o seguinte comando:

```{r, eval=FALSE}
help(summary)
```

ou

```{r,eval=F}
?summary
```

Inclusive pode pedir um exemplo de como utilizar a função que está buscando

```{r,eval=F}
example(summary)
```

### Boas Práticas

É fundamental que o usuário seja organizado. Forma é muito importante! Assim o usuário deve adotar padrões que auxiliem na organização do seu script ou programa.

**Case Sensitivy**:
O R diferencia letras minúsculas e maiúscula. Ou seja, m é diferente de M. Por exemplo, considere as três formas de escrever a palavra idade.

\begin{center}
idade ou Idade ou IDADE
\end{center}

<p style="text-align: center;">idade ou Idade ou IDADE</p>

Cada uma delas representa variáveis diferentes.

::: {.callout-tip}
## DICA

Sempre utilize as suas variáveis em minúsculo. Adote isso como regra geral.
:::



**Criando Bons Nomes**:
Vamos supor que queiramos criar uma variável que indique a idade que se formou na Universidade. Temos algumas opções:

  * **id**: Ruim, pois não tem significado claro e pode confundir com a variável de identificação
  * **idade\_formou\_na\_universidade**: Ruim, pois o nome da variável é muito grande, difícil de escrever e de visualizar no banco de dados.
  * **idade\_form**: Bom nome, significativo, minúsculo e pequeno separa os dois nomes por underline
  * **idadeForm** :Bom nome, significativo, minúsculo e pequeno separa os dois nomes por uma letra maiúscula.

::: {.callout-tip}
## DICA

Adote uma regra de criação para você e evite mudar. Crie nomes pequenos e significativos. Nunca inicie uma variável com número.
:::




### Criando projeto no R

Para saber em qual diretório o R está utilizando para salvar seu espaço de trabalho utilize o seguinte comando:

```{r,eval=FALSE}
getwd() 
```

No RStudio, sempre prefira a criação de um projeto para a organização de seus dados, com isso, ao mudar de máquina (ou estrutura de diretórios) seu código continuará funcionando normalmente.

```{r,eval=FALSE}
  File -> New Project
```

### Identação é Importante

Identar é o recuo no texto em relação a margem. É importante que esse recuo exista para linhas do seu programa que são hierarquicamente conectadas. Vejamos dois exemplos com e sem identação:

*Sem Identação*
```{r,eval=F}
x=c()
x[1] = 3
for (i in 2:9) { 
x[i]=2*x[i-1]
}
```

Note que a quarta linha desse programa está hierarquicamente conectada a linha 3 do "for", ou seja, é uma continuação do comando e portanto deve ser identado para demonstrar essa relação de dependência. Vejamos

*Com Identação*
```{r,eval=F}
x=c()
x[1] = 3
for (i in 2:9) { 
  x[i]=2*x[i-1]
}
```


## Inserindo Dados no R

### Tipos de Variáveis

O R possui diversos tipos de variáveis. Alguns desses tipos são:

**Vetores**:
Vamos inserir os dados denúmero de homicídios de mulheres nos diversos Estados brasileiros para o ano de 2022.No primeiro elemento teremos um erro, ao invés de 22 colocaremos 2.E não colocamos o valor do Distrito Federal e nem Tocantins

```{r}
homic <- c(2,  73,  22,  88,  406,  264,    95,  137,  127,  101,  75,  309,  200,  86,  256,  219,  70,  283,  60,  281,  88,  33,  101,  423,  37)
homic
```

Podemos inserir vetores de texto, por exemplo, iremos inserir os estados brasileiros na mesma ordem do homicídio acima. 


```{r, echo=FALSE}
estados <- c("Acre",  "Alagoas",  "Amapá",  "Amazonas",  "Bahia",  "Ceará",  "Distrito Federal ",  "Espírito Santo",  "Goiás",  "Maranhão",  "Mato Grosso",  "Mato Grosso do Sul",  "Minas Gerais",  "Pará",  "Paraíba",  "Paraná",  "Pernambuco",  "Piauí",  "Rio de Janeiro",  "Rio Grande do Norte",  "Rio Grande do Sul",  "Rondônia",  "Roraima",  "Santa Catarina",  "São Paulo",  "Sergipe",  "Tocantins")
estados
```


Algumas manipulações importantes que podemos fazer com os vetores. Renomeando e removendo o vetor antigo:

```{r, echo=FALSE}
homic_abs=homic
rm(homic)
```


Trocando o primeiro elemento do vetor e dando o print do novo resultado:


```{r}
homic_abs[1]=22
homic_abs
```


Algumas maneiras de pedir o print do vetor de homicídios femininos. Somente o estado 7, todos menos o estado 7, Estado de 1 até 7 etc:


```{r}
homic_abs[7] 
homic_abs[-7] 
homic_abs[1:7]
```


Podemos incorporar novos dados no nosso vetor de homicídio feminino, Vamos incorporar o dado do Tocantins na posição 7 e o valor do Distrito Federal na útima posição - 27. Depois trocaremos os dois estados de posição:


```{r}
#colcar exemplo de inserir no inicio

#inserir no meio e no final 
homic_abs <- c(homic_abs[1:6], 36,homic_abs[7:25], 32)
homic_abs

#troca de posicoes
temp <- homic_abs[27]
homic_abs[27] <- homic_abs[7]
homic_abs[7] <- temp
homic_abs
```


**String ou Texto**:

String são as variáveis tipo texto. Esse tipo de variável já apareceu na seção anterior quando apresentamos um vetor com a classificação dos Estados. Vejamos mais uma vez. Podemos criar uma variável que contêm "estado homicidio". Uma segunda maneira é criar um vetor com dois elementos "estado" e "homicidio". O comando `paste` cola a variável texto "estado" e a variável texto "homicidio", separado por um espaço.


```{r}
a <- "estado homicidio"
a
b <- c("estado","homicidio")
b
b[1]
paste(b[1],b[2],sep=' ')
```



**Fator**:

Fator são variáveis de classe. Fator armazenam os valores inteiros na forma de um vetor com as quantidades das k classes e o vetor string dos valores originais. Vejamos o exemplo de um vetor. Podemos análisar os homicídios por região geográfica do país. Assim, classificaremos os estados por região:


```{r, results='hide'}
regiao <- c("N",  "NE",  "N",  "N",  "NE",  "NE",  "CO",  "SD",  "CO",  "NE",  "CO",  "CO",  "SD",  "N",  "NE",  "S",  "NE",  "NE",  "SD",  "NE",  "S",  "N",  "N",  "S",  "SD",  "NE",  "N")
summary(regiao)
```


Agora vamos transformar o vetor anterior em um fator

```{r}
regiao <- factor(regiao)
summary(regiao)
levels(regiao)
```


O comando `levels` fornece as classes existentes, no caso acima temos 5, sendo elas 4, 7, 9, 3 e 4. 

Fatores podem ser as características de raça, gênero, status familiar, status de saúde, qualidade do atendimento etc. 




#### Data Frame ou Banco de Dados

Esse é um tipo mais geral de variável e consegue lidar na mesma estrutura com variaveis de tipos distintos como numérica, texto e fator. Um banco de dados similar aos outros programas estatísticos. Podemos criar essa variável de forma manual.
Nosso banco de dados será composto por 4 variáveis, a primeira o estado, a segunda a região, a terceira o número de homicídios femininos e a quarta o número de feminicidios. As três primeiras já foram incluidas acima e vamos criar somente a quarta. O comando `typeof` mostra qual o tipo de variável.  

```{r} 
feminic_abs=c(11,  31,  8,  21,  107,  28,  19,  33,  56,  69,  47,  40,  171,  49,  26,  77,  72,  24,  111,  16,  110,  24,  3,  56,  195,  19,  14) 
typeof(feminic_abs)

```


Para criar o banco de dados utilizamos o seguinte comando:


```{r} 
data_feminic22<-data.frame(estados, regiao, homic_abs, feminic_abs)  
```


Podemos modificar o nome das variáveis com o comando `names`. Entretanto, tem que renomear todas

```{r, results='hide'} 
names(data_feminic22)<-c("estado", "regioa", "homic_abs", "feminic_abs") 
data_feminic22
```


Ou podemos renomear somente algumas com o comando `reshape`:

```{r} 
library(reshape)
data_feminic22 <- rename(data_feminic22, c(estado="estados", regioa="regiao"))
data_feminic22
```


Podemos também listar variáveis do banco de dados, por exemplo, listar colunas de 1 a 2 ou listar por nome das variáveis, conforme apresentado abaixo:


```{r,eval=F} 
data_feminic22
data_feminic22[,2:3]
data_feminic22[1:2,2:3]
data_feminic22[c("regiao","feminic_abs")]
```


Entretanto, inserir dados na mão pode ser uma tarefa muito penosa e existem soluções bem mais simples e rápidas para inserção de dados. Nas seções seguintes veremos aprenderemos mais funções úteis para lidar com banco de dados.

#### Trabalhando com as variáveis:

Vamos retomar duas variáveis *homic_abs* e *estado* e vamos manipular essas duas variáveis. Primeiramente vejamos o número de elementos, estrutura, classe e nome:


```{r} 
length(homic_abs) 
str(homic_abs)    
class(homic_abs)  
names(homic_abs) 
```


Observamos que a variável não possui labels. Vamos colocar os Labels nessa variável, ou seja, os rótulos.


```{r,eval=F} 
names(dolar15) <-c("cambio15_jan","cambio15_fev","cambio15_mar","cambio15_abr",
                   "cambio15_mai","cambio15_jun","cambio15_jul","cambio15_ago",
                   "cambio15_set","cambio15_out","cambio15_nov","cambio15_dez") 
```



Podemos combinar as duas variáveis de forma distintas, por exemplo combinar na forma de um vetor, combinar como coluna ou combinar como linha, vejamos a diferença:

```{r, results='hide'} 
#Precisa mudar essa parte de posição está confuso pois falamos de dataframe e aqui de vetor
comb1 <- c(homic_abs,estados)      
comb2<- cbind(homic_abs,estados)
comb3 <-rbind(homic_abs,estados)
comb4 <- data.frame(
              homic_abs,
              estados
              ,stringsAsFactors = F)
comb1
comb2 
comb3
comb4
```

Vejamos quais objetos temos e vamos pedir para visualizar os objetos que acabamos de criar. Por fim removeremos o vetor comb1.


```{r,eval=F} 
ls()  
comb1
comb2
comb3
rm(comb1)              
```


### Importando os Dados

Disponibilizamos dois banco de dados, um contendo os homicídios e feminicídios por estado e outro com as tentativas. Esses arquivos estão em formato csv (comma separated values).

Para leitura desse arquivo em csv o seguinte comando é necessário `read.csv`, indicado que possui cabeçalho e que o separador é ";"


```{r} 
df_feminic22<-read.csv("C:/Users/Alexandre_Nicolella/Aulas/FEA-RP/Jurimetria/dados_feminic.csv", head=TRUE,sep=";")

df_t_feminic22<-read.csv("C:/Users/Alexandre_Nicolella/Aulas/FEA-RP/Jurimetria/dados_tent_feminic.csv", head=TRUE,sep=";")

```


Para leitura de arquivos em Stata terá que utilizar o pacote `foreign`, conforme exemplo abaixo:

```{r,eval=F} 
library(foreign)
stata_feminic <- read.dta("~/feminic.dta")
```


Além desses, o R é capaz de trabalhar com SQL, SAS, SPSS, Excel entre outros.

::: {.callout-warning}
## Cuidado com o Ponto

O R usa o formato americano de separação numérica. Usa ponto ao invés da vírgula para separar a unidade dos decimais. No Brasil usamos a vírgula. Isso sempre gera conflito. No seu csv evite usar acentos nas palavras e use ponto como separados dos decimais e não use separador dos milhares. Exemplo: 12500.97
:::

### Exportanto os Dados

Podemos exportar os dados em diferentes formatos. Alguns exemplos são csv, texto delimitado, excel, stata. Vejamos em csv:


```{r,eval=F} 
write.table(df_feminic22, "C:/Users/Alexandre_Nicolella/Aulas/FEA-RP/Jurimetria/export_feminic.csv", sep=";")
```


Para exportar em Stata utilize os seguintes comandos:


```{r,eval=F} 
library(foreign)
write.dta(df_feminic22, paste(getwd(),"~/Banco de dados/export_feminic.dta",sep=''))
```


### Lidando com Dados Missing

Não temos informação para as tentativas de feminicidio para os estados de São Paulo e Mato Grosso. Uma maneira de lidar com valores missing seria fazer um subconjunto que veremos mais a frente. Agora seguiremos alguns passos para analisar os valores missing do nosso banco de dados.

Primeiramente, analisamos se há valores missing no banco de dados:

```{r,eval=F} 
is.na(df_t_feminic22)
```


Podemos desconsiderar os valores *missing* da análise de interesse, vamos fazer a média do dolar sem considerar os valores missing:

```{r} 
mean(df_t_feminic22$t_feminic_abs) 
mean(df_t_feminic22$t_feminic_abs, na.rm=TRUE)
```


Podemos criar um novo banco de dados sem os valores missing.

```{r} 
df_t_feminic22_sem_missing <- na.omit(df_t_feminic22)
mean(df_t_feminic22_sem_missing$t_feminic_abs)
rm(df_t_feminic22_sem_missing)
```


Outra maneira de excluir os valores missing seria a utilização do comando `subset` removendo as observações que contenham valor missing. Isso será explicado em seção a frente.

Pode-se também recodificar uma determinada variável para missing. Muito comum nas pesquisas do IBGE os valores missing serem identificados por um número, por exemplo 999999999999. Dessa forma podemos indicar que esse não é número e sim um valor missing da seguinte maneira:


```{r,eval=F} 
df_t_feminic22$t_feminic_abs[df_t_feminic22$t_feminic_abs==999999] <- NA
```

Todos os valores que forem 99 serão exluídos e a celula ficará com um *NA*

::: {.callout-warning}
## Dados Missing

Doois pontos importantes, dados missing não é 0 e nunca devem ser substituídos por 0. Pois 0 é um valor e missing é que não sabemos. Outro ponto é que devemos evitar excluir do banco os dados missing, melhor é fazer as contas retirando apensa do cálculo

:::


## Operando o Banco de Dados

### Criando uma Nova Variável

Vamos criar uma variável que seria a soma dos homicídios e feminicídios no estado. Para criar a variável precisamos dizer primeiro qual o banco de dados em que queremos criar e qual o nome da variável, conforme apresentado na expressão abaixo.

```{r} 
library(reshape)
df_feminic22 <- rename(df_feminic22, c(feminico_abs="feminic_abs"))


df_t_feminic22$t_total_abs<- df_t_feminic22$t_feminic_abs + df_t_feminic22$t_homic_abs

df_feminic22$total_abs<- df_feminic22$feminic_abs + df_feminic22$homic_abs
```


Agora vamos criar uma variável binária que representa como 1 os estados que possuem a taxa de feminicídio em relação ao total de homicídios maior que 50\%. Novamente, precisamos indicar o banco de dados e o nome da variável no banco de dados.

```{r,message=F} 
df_feminic22$mais_50[df_feminic22$part_feminic < 50] <- 0
df_feminic22$mais_50[df_feminic22$part_feminic >= 50] <- 1

df_feminic22$mais_50

```



### Operadores Aritméticos e Lógicos




